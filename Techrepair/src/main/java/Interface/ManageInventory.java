/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interface;


import databaseconnection.ConnectionManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;
  // Ensure you have this dependency for resultSetToTableModel
/**
 *
 * @author MSI
 */
public final class ManageInventory extends javax.swing.JFrame {
    
    Connection connect = null;
    PreparedStatement p = null;
    ResultSet r = null; 

    /**
     * Creates new form ManageInventory
     */
    public ManageInventory() {
        initComponents();
        
        // Connect to DB
        connect = ConnectionManager.conn();

        // Load table with inventory data
        tableload();
    }
    
     // Method to load data into the JTable1
    public void tableload() {
        // SQL query to select necessary fields from the table
        String sql = "SELECT InventoryID, ProductName, Quantity, UnitPrice FROM manage_Inventory";
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            // Prepare the SQL statement
            ps = connect.prepareStatement(sql);

            // Execute the SQL query and store the result in ResultSet
            rs = ps.executeQuery();

            // Set the model for jTable1 with the ResultSet data
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            //Logger.getLogger(InventoryManagement.class.getName()).log(Level.SEVERE, "Error executing query or loading table", ex);

        } finally {
            // Close resources in the finally block to ensure they are closed even if an exception occurs
            try {
                if (rs != null) rs.close();
                if (ps != null) ps.close();
            } catch (SQLException e) {
              //  Logger.getLogger(InventoryManagement.class.getName()).log(Level.SEVERE, "Error closing resources", e);
            }
        }
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        invenbox = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        proname = new javax.swing.JTextField();
        quntybox = new javax.swing.JTextField();
        pricebox = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        searchbox = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Inventory ID ");

        jLabel2.setText("Quantity");

        jLabel3.setText("Unit Price");

        jLabel4.setText("jLabel1");

        jLabel5.setText("Product Name");

        quntybox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quntyboxActionPerformed(evt);
            }
        });

        pricebox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceboxActionPerformed(evt);
            }
        });

        jButton1.setText("ADD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("DELETE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("UPDATE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("SEARCH");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        searchbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchboxActionPerformed(evt);
            }
        });

        jButton5.setText("BACK");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel6.setText("Inventory Manage");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Inventory ID", "Product Name", "Quantity", "Unit Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(invenbox, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jButton1))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(quntybox, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(proname, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(pricebox, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(jButton2)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton3))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(18, 18, 18)
                                .addComponent(searchbox, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(jButton5))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(jLabel6)))
                        .addGap(76, 76, 76)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(197, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(invenbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(proname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(quntybox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(pricebox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(searchbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton5))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(721, 721, 721)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quntyboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quntyboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quntyboxActionPerformed

    private void priceboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceboxActionPerformed

    private void searchboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchboxActionPerformed

//Add a new inventory entry
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
          // TODO add your handling code here:
 try {
        // Retrieve input values from UI components
        String inventoryID = invenbox.getText();
        String productName = proname.getText();
        int quantity = Integer.parseInt(quntybox.getText());  // Assuming quantity is an integer
        double unitPrice = Double.parseDouble(pricebox.getText()); // Assuming unit price is a double
        
        // SQL query to insert a new inventory record
        String sql = "INSERT INTO manage_Inventory (InventoryID, ProductName, Quantity, UnitPrice) VALUES (?,?,?,?)";
        p = connect.prepareStatement(sql);
        p.setString(1, inventoryID);
        p.setString(2, productName);
        p.setInt(3, quantity);
        p.setDouble(4, unitPrice);
        
        // Execute the SQL query
        p.executeUpdate();
        JOptionPane.showMessageDialog(null, "Inventory item added successfully");
        
        // Refresh the table to reflect the new entry
        tableload();  // Make sure this method is adapted to reflect inventory data
        
    } catch (SQLException e) {
        System.out.println("Error adding inventory item: " + e.getMessage());
    } catch (NumberFormatException e) {
        System.out.println("Invalid number format: " + e.getMessage());
    } finally {
        closeResources();
    }
    }//GEN-LAST:event_jButton1ActionPerformed

// Delete an inventory item
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
try {
        // Retrieve the Inventory ID from the input field
        String inventoryID = invenbox.getText();

        // SQL query to delete an inventory item
        String sql = "DELETE FROM manage_Inventory WHERE InventoryID = ?";
        p = connect.prepareStatement(sql);
        p.setString(1, inventoryID);
        p.executeUpdate();

        JOptionPane.showMessageDialog(null, "Inventory item removed successfully");
        
        // Refresh the table to reflect the changes
        tableload();  // Ensure this method is adapted to reflect inventory data
        
    } catch (SQLException e) {
        System.out.println("Error deleting inventory item: " + e.getMessage());
    } finally {
        closeResources();
    }

    }//GEN-LAST:event_jButton2ActionPerformed

// Update inventory item details
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
 try {
            String inventoryID = invenbox.getText();
            String productName = proname.getText();
            int quantity = Integer.parseInt(quntybox.getText());
            double unitPrice = Double.parseDouble(pricebox.getText());
            
            String sql = "UPDATE manage_Inventory SET ProductName = ?, Quantity = ?, UnitPrice = ? WHERE InventoryID = ?";
            p = connect.prepareStatement(sql);
            p.setString(1, productName);
            p.setInt(2, quantity);
            p.setDouble(3, unitPrice);
            p.setString(4, inventoryID);
            
            p.executeUpdate();
            JOptionPane.showMessageDialog(null, "Inventory Updated");
            tableload();
        } catch (NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
            Logger.getLogger(ManageInventory.class.getName()).log(Level.SEVERE, "Error updating inventory", e);
        } finally {
            closeResources();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

   // Search for inventory items based on product name or description
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
try {
        // Retrieve the search term from the input field
        String searchTerm = searchbox.getText();  // Assuming 'searchbox' is used for search input

        // SQL query to search for inventory items based on ProductName or Description
        String sql = "SELECT InventoryID, ProductName, Quantity, UnitPrice FROM manage_Inventory WHERE ProductName LIKE ? OR Description LIKE ?";
        p = connect.prepareStatement(sql);
        p.setString(1, "%" + searchTerm + "%");
        p.setString(2, "%" + searchTerm + "%");

        // Execute the query and update the table model with the results
        r = p.executeQuery();
        jTable1.setModel(DbUtils.resultSetToTableModel(r));
    } catch (SQLException e) {
        System.out.println("Error searching inventory items: " + e.getMessage());
    } finally {
        closeResources();
    }
    }//GEN-LAST:event_jButton4ActionPerformed

  // Go back to the previous menu
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Main_menu obj = new Main_menu();
            obj.setVisible(true);
            dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int r = jTable1.getSelectedRow();
        jTable1.getValueAt(r, 0).toString();
    }//GEN-LAST:event_jTable1MouseClicked
    // Close resources used for database operations
     private void closeResources() {
    
        try {
            if (r != null) r.close();
            if (p != null) p.close();
            if (connect != null) connect.close();
        } catch (SQLException e) {
            Logger.getLogger(ManageInventory.class.getName()).log(Level.SEVERE, "Error closing resources", e);
        }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ManageInventory().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField invenbox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField pricebox;
    private javax.swing.JTextField proname;
    private javax.swing.JTextField quntybox;
    private javax.swing.JTextField searchbox;
    // End of variables declaration//GEN-END:variables

}
